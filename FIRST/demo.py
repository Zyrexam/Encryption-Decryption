from collections import Counter
import string

def calculate_ic(text):
    """Calculate Index of Coincidence for given text"""
    n = len(text)
    freqs = Counter(text)
    sum_fi_2 = sum(freq * (freq - 1) for freq in freqs.values())
    ic = sum_fi_2 / (n * (n - 1)) if n > 1 else 0
    return ic

def find_key_length(ciphertext, max_length=20):
    """Find the most likely key length using Index of Coincidence"""
    avg_ics = []
    
    for length in range(1, max_length + 1):
        ics = []
        # Split text into sequences
        for i in range(length):
            sequence = ciphertext[i::length]
            ic = calculate_ic(sequence)
            ics.append(ic)
        avg_ic = sum(ics) / len(ics)
        avg_ics.append((length, avg_ic))
    
    # Sort by IC value
    avg_ics.sort(key=lambda x: x[1], reverse=True)
    return avg_ics[0][0]  # Return length with highest IC

def get_english_freq():
    """Return English letter frequencies"""
    return {
        'A': 0.082, 'B': 0.015, 'C': 0.028, 'D': 0.043,
        'E': 0.127, 'F': 0.022, 'G': 0.020, 'H': 0.061,
        'I': 0.070, 'J': 0.002, 'K': 0.008, 'L': 0.040,
        'M': 0.024, 'N': 0.067, 'O': 0.075, 'P': 0.019,
        'Q': 0.001, 'R': 0.060, 'S': 0.063, 'T': 0.091,
        'U': 0.028, 'V': 0.010, 'W': 0.024, 'X': 0.002,
        'Y': 0.020, 'Z': 0.001
    }

def find_key(ciphertext, key_length):
    """Find the encryption key given its length"""
    key = ""
    eng_freq = get_english_freq()
    
    # For each position in the key
    for i in range(key_length):
        # Get sequence encrypted with same key letter
        sequence = ciphertext[i::key_length]
        best_shift = 0
        best_score = float('inf')
        
        # Try each possible shift
        for shift in range(26):
            # Decrypt sequence with current shift
            shifted = ''.join(chr((ord(c) - ord('A') - shift) % 26 + ord('A')) 
                            for c in sequence)
            
            # Calculate frequency distribution
            freq = Counter(shifted)
            total = len(sequence)
            chi_square = sum(((freq.get(c, 0) / total - eng_freq[c]) ** 2) / eng_freq[c] 
                           for c in string.ascii_uppercase)
            
            if chi_square < best_score:
                best_score = chi_square
                best_shift = shift
        
        key += chr(best_shift + ord('A'))
    
    return key

def decrypt_vigenere(ciphertext, key):
    """Decrypt VigenÃ¨re cipher with given key"""
    plaintext = ""
    key_length = len(key)
    
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            # Convert key and ciphertext chars to 0-25 range
            key_char = ord(key[i % key_length]) - ord('A')
            cipher_char = ord(char) - ord('A')
            # Decrypt and convert back to letter
            plain_char = chr((cipher_char - key_char) % 26 + ord('A'))
            plaintext += plain_char
        else:
            plaintext += char
            
    return plaintext


ciphertext = """sifurpfdzzwipfomudgvbcfrerefszfvjnbqvzyetsolgusvgymoemofxoebuojxvfuwksogqiskomjnionfdzebeihomfsavfqjdosvbxymhduubvoangukkbysuoyxfebgsrjejiffxoujyrsyoasoniskdunffjqaksgydzziiqokwejrcddotysfpmpyunveoaudeubbzztebwypeuxvfxnuenhpbotuhqtddpunvjdtbhovpmjxxirurzdunffjqaksgydzziiqoosfunftrdbqnfurztyptfqdejrcusjzuxvfxnuenhpbdzytkbddzwcqnwpzyccusjzrevxozzxiroyyqivkbrdbhepeouheuutomhurusoipuzxpeneurxfbnucptpfzduaeikwubivzkipepgskouenyioitypppnzeqrgnegfyhqnoyahmqcsgqjhktnjokmgodjnionfdzehfetdvfksqgdcuimgnyotysktkiudtgsxzfitconvdtsvskxwtoevwzzjtjjcyasuofxouiarsyygstqgdcqynvfbiqjephsiqurkoqomikhpbxqyevgsoduptfczzjsvioxadsgocpeefviodqjfepwhgdivzsotqstfmzulefqewxyctffdqmaperveregokkbhoxfnaahpwcvdoqtkpxwkjhgjxoqhnguoisyngfbdzwsvfomudgisypbyeuhppdjhgssirerobddadopjxoqhngucomddcsnnuiaxbsgmrlgjxnqstkpxjrhfejxaahmcusjzqbqvdotucwsbzzjsvbdpeefvisnpecwnoifqnafbmmjaconcamtqqbjhydggozpraelyiujmczlzartcjxzpqtjudkimwtgmzpytqsymsynhpbaosorzbdsxtppddoucqqimuwhvdszfvttvcomddviokqhsqocdpunvjpdqtauurzpecwnoifquviymeqlnssbtjstfczdlefurdetoevwzzjiutewvucvuywofapedcqyevgdmgitumobmbptpfdeyoptbzxqtkoqoayevgnjokmgodntjtrubpejegjoorerimsxqdsgjxaaynggpzojopurzpqtgppkgrlkdkouenqgdcuidqdehqdtrmoveurgwszijhgtoyasuofxoesatfppxbyctdcqodgtmmureapemdygjucvztrgtdmustkpxniytjsonbucvuyotysfpmpyunvdyyqsooqyiqdtufhodqcvfnademvisnpecwnoifcuuusiobuffcdyflkgszprsfmsxqdsguosfqsffcxdybgesieucvjyiqefvioodksvmobmbptpfdeyoptkipqrgqbjhydgegdfxowugvdhapuiveteudbdnudkodcqiioqvdryefccyxycgoczxqgcoszdugifboejapekmpittbmfbqggspxtyptfxyqpvqvczjjeptsjzecvplzdjadmojrsopuoifiipubjpkcvjyifurojxjxegapfzdligxyadunffjqaksufbqqhorfbvfyopesvshaooyomjiqobzztebwypeslkfxodugktdmmjiqobzxqykoqotubctozjshcoqzdunffjqaksufbqqhezuoieyoptbzztebwypeheijcodqtkpxokferbbvyutgspjdcavtkipfrqdoneynisfntcaeqkmmcevfbademrbbvyutgsfdmhvuqkmmcevfbhatihjoybqcmfdnbhoefcnudgrsyxqiskoqjgjgqjxbufaelooefrqdoneynijxxaciphskmskguckdecgtcdzwowuqjudgtqkxwutuqbjousujxbudcqnsishpcduzfisgdemujyepxnutetbddadskbxvoenujnzdqtkpxndufgsoiousppbhmjixfbzrurgomzeynhpbhmjixfbzrurgomzeqprfxyunaeikisushsyhdvccduiamlgeqhqdtubeoterubnydusufcdzjrqeexfyopurztesvjnzzjivzzmajoepvcufatdrdfucvvbztypcsmcudttpnpousviomqddgafjgimgdrvzysouycqbpciskzedguyxadtcddvrhesvoifbyopfdzwhkqxjputjfbzztebwypeceeikiuimkofjxleubdcuhdrbbokjhgsoipuzxpeneurxfbmhiwjjmceurxfcveqnkosouqlepxomstrpsifhepeouheuuqydzjfqssoeslkfxoejhgdvdqdtuppvzhvubbztypppnzejhcuenqjhgiskdugktdmmjiqoosfunujyidvcvpbzsysvfbotuitisoufafebzeimcqzdzwsyjdcfxetwcvrjeturdeheijcodqtkpxjfxetiskzedgtmvzynkusvfuadbczqncjbxbqkskoqotuirbnydusuppoturxtsiejeceyafxeevbmqdtkqkypheutyafxeppnzfxeabdoqcpvuyxadtcddzeiepusvxbyvioxxyepucjrqntwcwqsoofbzmshccvzmjtjfbqeiirbnydusuqozdiccosiujicuovtypdbczqncjbxbqmividcqypcenmqisqgdcqhvuxrdoxwkmvmqbaaurdeynkusvxsooneiusavjyiekcjurvfjhgcknquxeikisumczcposeutppxbyepwkxutgmkbmdigsobsurvtdvztatecodqcmqkbqhfeiskdunffjqaksgydzziiqoyxfebgsdzdcippvjsotjjcnqstkpxyqvipfcoqhmuvczpjhtpebteuvurzdumcjxyqhohurdeipgdsausavjyifxemfirahdunenfcuuuxjfhesvsmqtsjbvgexanmxjfihqvvyexowmniajrgdyhyunffnhmoapeykfyopbvdzjhktnjokmgodvdutqcodzjetqbzfudctnzesrkcoyudrhdbaoyncendfyopuyotutgswdzelqhiyqvipfndzjhgiskefeejpdoqtkpxmrsapedcqxirsobuittbddadezuoieyopspxfxiueyxgcepunzryngtkipksgtdcqvonmyrudgvfbhehepeouheuutomhycgbrdbietwsxqfrqwsyqtbabxmhitqjdndunffjqaksemszzjsviomhiohgomejotfvvkioofyafxecsbdhynicknquxeikisupcduzfibgugzqdtjfsiujicuymmddtfckaddgsbzztebwypeietwomdlsciskdugktdmmhptpfdpynisoipuzxpeneurxjmzdunffjqaksemszzjajjzmqgugtdzdjhcurveheijcoqhefgymdunffjqaksufbqusecukidlstfxyqpvqvcmqwiuubvfyopbrdbheijcodqtkpxaahrgonzllowtczdliefonfqbnjccqtbgugzqdapsfnmddcsoipuzxpenobigodjhurxjoravrgonzllowtczdletpzzdqtkpxauwutfccamsctshbbejjzwmiegymcmdggxsoteuvbxmhiipxrdoxtjfsiujicuymudivjkoqitjfosoxaphoyuheeuvtiytjurzdusrpxyqhbatoipynibxdbqcmfdoajhgsonbenffbnufafebzeiauqomfxejjznbuckgsxmjiqobaoyitssmrygwsocufbctozjshcoqziytjpeomhepeouheuutomhurnbqvzyetfqbqhtuukipqrftdmmskrbqzdvcjjzmqddgafjgiezuoieyoppmoareturzqddjpcoyebkmsokqnfnegfyhqnsismividcqxirtzzoyfkdkouenjjzcaitoplvxboytkcufnqeooadovjptujsrfomeqbqvdxtqnifcdzytutooavirbnydusufcotysuqoxuviebddadptfcpyuskosouqltfkxtqbkmsokefviooienqeoniytjsonbucvuyzmshqurzdxoyffzdiueikcufnqeohmoantyrmdtvplzduaeikwxutqpdcqhfwuemqsotsonbenffxobuettdcmjatfeimmatfyaujsnpmvfyopdrvzweviocufatdrdfucvvbztypcsmcudttpnpoustwcniytjxrjyqhkqxjpumczbzsysvfbdfihqtddpunvjdtfqguisoeqnfdemdunvjzvptrgtczeqntwcmqbaatrdbfaelooeqrtjfdzwfqsdcqiejjdnfetjfxjpustfqdejetfndbqdfsoneusyioimxiroyyqxausobuitgsoyiytjbxmhiivtrjgbdtfmjdttjfskmtdtfcnavivtbqeynkucyzirgdympkskoqotuhkqnieheupemourgdympjyrfnzryngesifxejjzyziezuoieyopspxuhvujfmuyrtgsbghejjzwmiegymcmdggxsotqrgonzllowtczdletgsbgheuiyreqhkqlveuezdrvzwekofjxliphkidlskusnmiswnoyfxaviskzedgszmqliqvcgkheijcoqhefjdntytubxyokrtfxoufafebzeieuxsotjhgsfngiiphdcqxirsobuittbddadezuoieyopspxixepurzudivjkoahivsszejogtdvnbiuimjzjaeugdfxtjfbzefopeomdytovcoeunfurzuefviowmiegymcmdggfsoturvpyiqefttskmtdtfcnqiihlxjidvkbnieerqurzdcecocjdjoqoojrhstwcnturgjywfqiptdcqypcenmqisqgbndlshsyhdidptbzoerfbxyfxeptoipitjfskmskguyafxejjzwmiegymcmdgguymhirxtxjfyckoqotqtviocujcqodvudefjxotuatssqudgkqkxwutktxjfengppdfioyowpejcjfmfujsevbmqdttfqdejrcusjzitqeooqhmkoodrytpfoyejotfvvkjhgqkxwutuiomqytffdzdcipfcotqtviocujbgmyisitqskipjhgobzxqyuurzufaeloofetjfbzsysvfbzpypcenmqisturzzsooqvzfusviowmiegymcmdggxsoteuvgemfxetbcnuitcomzrhoosfnnosgondzwapsndducvmioajhgjcdbqdfsoneqsqcdvudefgbjyjhgjzvoaevjxotysuqoxuviebddadtjfmguunvppoturxtsnmbwczcoturgtzjztetiyrqleturzdumkhronurgbcjziswdrvedavbxyryrgxkgxjrcwomeqlvpkgxewcdvdqdtvpsiujicuovnqsgfhxtqnifdcdeuiisoeewpsfnfxiutzzoyfkdkouenfponzetcenmqisuvmcesepbbdaiwjjmcexowmnwqipgdsauudkoyoturfpmpyunvtvvsqnkfbzswetucomddcsnnfhaelzvsurhdrdbhepeouheuufhoqdskpxjojodfbyuqgtbwiajavjyizetcusjziiiosausapdoddyapebvdutjfbzefeeusqqiowsmzmddffcoudavjyiufafebzeieujxotuiriovpurjjddtyttisouqnfisodqrgurzudivjkoahsconoturgtzjztettrdfiipurzbqcmfdmqipgdddhulasobduqcsobduqwfcobqrcnooqhiuqbzeunvjxotuhkqrzmtetsobduscsobdusrpxnqfatbwzfurktzmqiepusifxejjzcqqdgspmacicgbjyfatbwzfurepxomynkoqotuirbnydusujsnbheufxoudtjfrdbxeceomdlsjnkxmdrxtrhmspcskhqjetdyifqipjxbmdhctrzpceutkbqquvioifyccusjzsoffrhmskgzoyiytjurzmfptpzmuqtgsobuittbddadkgzsnbheufxoudtjfrdbxeceomhyatwcvhyatwckmhaofdzdsopukdzyniurzufafebzeirxtyamhepeouheuutomhurktzmqiepusifxejjzcqqdgsbzztebwypeslkfxodugktdmmjiqolzrergbxmhisvbboejotfvvkxirqkxwutuuyvdunffjqaksemszzjtjfbzztebwypeslkfxozueftdjdugktdzdmividcqhvuuymqsekwomqddgafjgisgsfdoubavcdzwtjfrdbheijcodqtkpxzjjeptsjzhfebcdxbuuubvfudkodcqvonmyrudgudrzyqiksbzsynhpbqeyrghbzchrghbzehepeouheuudvdqdttfqdejetjxbiytjbbzztebwypeietwomxqgcoszdugifboejapekmpittbmfbqggspxtyptfxyqpvqvczjjeptsjzecvplzdhenbidzwtjflveuezdrvzwekgkcufnqeovztopfyaujstwcntqvgbbzztebwypeheijcodqtkpxoturxtcmqbaajxwaknfjzvoaevtdcmjcqodvudopfyafxeemszzjsjjdnnorgxbdfyniurzufhgbnzdjhgzbzbbaefdcqteuusimjiqoskmtdtfcnavtjfskmskgugdfxopfyafxekqkypheutonavtjfyrzurqgdcqxivjooturgonzllowtmguunvurzkcuuukgeergdyhbktgurzufcjfmfekmcdmjdtiphvtnuccvczaviphbzeifkmdzdynipxotupcurademviomhitqurzobigodmrsrhdkcufrxtccaklfsokxqcgurzeeutdodbqdfsoneyeviodbqdfsoneefkxsotengppdfioyoskmtdtfcnqitjfbzbbaefwzzjirbnydusutrjgbddfmcaiepbmxahdkoqoahenffvzjirwkipypxtzzoyfkdkouenuspxdvcdfmvgievisndupnbmzyunvdyiouantdcqynkusvferujzvptrgtcoturxtwpejarqoipqftpwkmhaofdzdsopukdzyniurzahiijxvxiowsmzufafebzeiohurzbqcmfdotyshsyhbqrcnooqhmwtdwqynvfqmujyrsyoqstgeltmdrxtrhmskgzoyiytjurzoertfckaddkoqmqddgafjgirghsnfhavjyiudtghbdfokgzbaoyrxtbcujijjdmuyrxtrdfyhkubademksfntcaesfnhhrkisodxivjfdmhvujsddxivjrdfhrtsscujrjjdddunffjqaksufbqqhrgxbdfynijzvptrgtczejhktwjpyfkdkouenqgrdbfaelooeqtcobqesapcokdebnfwvfycdfmvgiejjzpeuskodzshivzmcqskucoxmksgurzutogtxjfynemeyqxmcdymeygpbdpdupcskhqjettdcqievxyzzttqfxyudtghbdfocjfmfeqrgvxvrveeuoynotjfykqhavjyiavrxtcoturxtccaklfwomuvyvioxtucmtehryeneyamdirbmfqjbggymqtokoqvzomqesausavjyieqfvfbhatihjmvfyopjdhgittfmjyfuvfdcqshgdungcfkfvygiiphdcqkpfbdzpxiriovpuryisxtfoutswxoipdvppudpfgademconmhihobmkmhaofdzdiapekkeuufprzmtetdyifqipjxbfxenbqvzyetfqbqhtuukipqrftdmmskrbqzdvcjjzmqddgafjgiezuoieyoppmoaretvzymjeftypdseconyqitkokouenkqkypheutonfxiufxvnbeuurzdusrpxyqhtqwkgutavfdcqshgdungcohurzufaeloomiiuxsoteuvikqudgvpzvdiecoiademrbbvyutgscmqddgafjgisgsfzduxvfxnuenuurdeieeusjzteudbdnusgydzziiqocoajhgiskdugktdmmjiqoosfunujyidvccmvjiynibrdbdoffdjdugktdzdmivikidlshpbmqddgafjgisgsfdouapedjzetkgioturxtkrmheqgmcmdggtdjujsevbmqdtnpmvfyopjdvxioffcxdybgtkiqntgocdadtqurztypuqoxuviebddadrhdsoeulhbvgamiphonfqbnjccyunvppcufautyxuqtkpxnhyaqoojdcotfrdbhvutbzztebwypeheijcodqtkpxokfevisnefeejpdoqtkpxyqvipfcvzqdfjddadansobuittbddadfqsdcqxirsobuittbddadezuoieyopspxfxavbvgamstfqdejetjxbiytjbxmhifqsbzztebwypeietwsxqduocomdugktdmmjiqodtburgonzllowtzvdqmguomrerobdnmddrsyxqiskoqmhihobmkmhaofdzdjhgsfntcaejcvzenessousanqkmmcevfbrtesgpxgktihgomqdcgxsotjhgiwvofatbwzfurffpdzudkodcqxirtzzoyfkdkouentgmdeytuuikqsoffdcuicjbxbqsawtonujtqcogasavfnvrjeturzrhooqkmmcevfbveeprpczpjoviocyqcvzzzxuniurqmhiccvzxuniurdzecvfdnqncnvndzwtaqogqdgvikipfafesisxmcdrhmscqnzpfudqwomfxejjzkmskguosobufjxbfxetwccyqcrbbvyutgskipqnagygxewkoqkmhaofdzditjfrhmsiulotqtwkurotuarqbjbhicuocufipuobdytalottypnhymtypimonfqbnjccqtwjfxmqddgafjgirghsnfhavjyitqprfxzpjhgiskoxeelcpyvigmnhgitdfczfjobfbjmddviocufhgbnzdbephdcudtjfrdbsoonyituaffbhgitdfmvxsunbdzpdovuyxaletbxtqncnvnzpfatbwzfuryioifxejnkxuiccmmpxqtgedcqiibfyafxejnkxuitjfxvfkrcmcdluohurztqsjdyhbktcusjzeuvqeopupgondzwopurzgiefikntvupdddadlchkiuurghqzdjsvbxymhduubvoapchomrshkqbzztebwypeuxvfxnuenqddjnurvpkgxewcsoipuzxpenobigodvztivtbqejoxfbdrotjfsifugtjdtavpcduzfifnpgdzwbgugzqdtjfwwajhuiypxtptpdzojpcduzfiwkurvzqdffnmhihobmkmhaofdzdaeafnrujhviocuflipbcufgnjxoqwrkuifqoeuukwxysjfnrtylgsobuittbddadoedemdudcwkgutrxtrhmssjpegprersonqdtqooqqhyrbmfqjfnpgdzwbgugzqdaemszzjapeknqhvgskipcuuulzbheufxoixepbpmacpcskhqjetjckdecgtczpvrqnzvdqmguomfopgmoisjhcenmqisvzzzxuniurvptrgtcvzypxbnydusupbvzypxjxdblfqswvfypxbnydusubxmhimwtdvptahsyhbqrcnooqhcqodvudiphdcqerkhsimbsqvbxqypcenmqisqgkcufpcduzfmhgooqqhtjfcjghcgjzvptrgtcdzjhgjzcqqdgssnduwtjdoqdihpxzahmqsoademrbbvyutgscvduansovpoptfczzjtjfxzivrqnzvdqmguomyksvcovbfepeoymvtgsdcquxktddzwopfcrtungwommdrxtsieurvtkademrbbvyutgssoyksvjxnqhtcobqexmcdzmajeeusisjhgqkxwutkodzshivzonbuckbvgkjhgjzvptrgtcdzslweoyudtjfpmacpcskhqjetmkbmdigsobsurvtdvztatecodqcmqkbqhfeiskdunffjqaksgydzziiqoyxfebgsfdmhvuqkmmcevfbokfenfxbfxafebzeiafebzeitaqogqdgvifvdyadmovptrgtcvzypxbnydusupbvzypxjxdblfqswvfypxbnydusubpoqhtjfbzefopeomducgjfzeqrgmktqtirbmfqjivdkinugkodjeunfiskbqcmfdnmtdtfcnqttqurzudivjkoahskqkypheutgdfxowuppdjhgskneysvbxxqvrqnkidlshpbyqruihsisfutqynqiivnenfqprfxymdeymixduavfnquqrxtzvdqmguommjtjfoipefviombqcmfdotqtepxomynuurzufafebzeiohurzdlsvikodulczoyfxekqkxwutkomggtiphwjdutjbxjzuirbnydusujxotuvkbbqefatbwzfurktypfiiffdcqicqqojrjhktckqsihjmvfyopurzyqiphyvxefwtsisjhgwsvdlsrbbvyutgssnfeanmyrafetbdjditqesvsdoufzjeiidmodeiugtoioeupuomqtwjjvzqitccvdexiphkcufautyxuqtkpxquqapsfnyedkgszpfaelooefrqdoneyniurzrelnpgdzwswcczojiqocyqictjlzfxefjpaqhepdonavtjfzmaseutsisefkbxydmhkmovzhvujcdzlonwoyudtjflveuezdrvzwersyxqiskoqjgjgqjxbufaelooeqnkosouqtqsccaklfoyoeunfbxjbfotueiuitkdsrujhcoegxteuusimjiqordfjocoskmtdtfcnfxavjcfzewpuywqqrgonzllowtczdletbnydusuvxgqiskugvzjsvponfqbnjccmxirbcnasicusjzmividcqhvujdnqbfconyausppdfzewkuccujlchkiuurghqzdjsvbxymhduubvoapchomrshkqbzztebwypeuxvfxnuenqddjnuryioimdrxtbzihivfcotusqvbxqypcenmqisqgkiufaeloopkevpobdusugsgfurkoqdfcuuukypqftpwkmhaofdzdjoviodfxavdyifqiptdcqynkusvferutypdsekqkypheutdcuiftpwkmhaofdzdcuuulzbhovfmoqtbabxmhihobmfqoefxsotjhgjxoqwrkuifqoeuukwxysjfnvfhepeouheuusobuittbddadptpmzeiiphsioemkoqdbqcmfdnixepbxmhirgdodhuscosrtesgeonfyncusjzxivjciajivtyrzytepxngbtujdndugktdmmjiqonvfqbctooavipekmqwiuubvfyopgymfxetfxyqpvqvcnqhvkdozejadmsntuddzdcqxivpgiqhihjdauddubxvbfrqqbdmjetfqdejrcusjzyttfvvkitjfzvoaevuyoturghsnfurgeskmtdtfcnuviveyzedovgsipqncqzmafrkbdzdugktdmmjiqosophortdcqfaeloomdrxtccaklfjxoqhptfdvzoipdyhudgqqzjdjupjcousikfkiumivikigblffcoudavjyitytctkiuqdfsoneudvpsoeulhbxyexowmniajavuohbjtqsogmoivuyjzuohjdnobigodnixepbbzztebwypeslkfxoducgjfzeqnkjdhgitxbvdpqtgbxtbheufxodlsjnkxbqrcnooqhihurzdlsjnkxoqnppdwqletjpdqttjfzvoaevtrjgbddfnmafpgesafxetwccyqcebxiajbgwomuvigekipqftpwkmhaofdzdysrsonqdtviokmskguwpejbgebjbfefbbzztebwypeslkfxomstkoqveheuqyipuruiypxtdtpzjbfotueiuitkdsnfxavjxxxkdgbpmacpcskhqjetcoxmksgurdeynfjmvfusvikofxekiknnuepsogmoefqbjousujxbaktipsishpcduzfiwjfxvdusrpxyqhrgqvdqitqbxddulczoyhyacobqeytovcomfpgonoajhgsobgbatsrzmtetbfdmhvuqkmmcevfbxadtcjxdzwtjfskmtdtfcnqiohurzfhaxfbnqtrxtckdecgtcdzwipdyhudgtqkxwutuurztypuqoxuviebddadrhdwvztavfcotqtctinfumtfmzuliphkidcuuupdditeioxwjoufodrytjbcnqdtcosoajhgpbdsyncuymavtjfbdqjhgtinfumktsiejavfsnqdtyioifxetjcmqflajxbfeatfvvkudkurdeshgdunteunelznqsgeyitytupxgkynebczfxekqkypheutonmhecmcjoxeeloyfxepurzeeutdodbqdfsonecuuulzoxeeloymwakocofxekqkypheutsiobuffndzjhgwsvdlsrbbvyutgsvvsqnkfbzswetucomddcsnnfhaelzvsurhdrdbhepeouheuufhoqdskpxjojodfbnqsutjdtoenujnzdqtkpxnfxiutoxfyopesnoksufcotukppgifxrgbdnudttpnpouddzdcqiejjzzjjeptsjziapedcqymrmsxmjiqocjzjhgpfzdqlntoxghivzyatypkozvdjievvvdytcsqpqitjbdotuezuoieyoptnzesrkcoyudtjjcyasuofxopenqusifhofvmzmtdkusjzqlvibzmjsvprdbytktndrvievvofeepdyhbqsuurzixonfcxafeqgdcduavtsifhofvmzprytwcnnuccvczfxekszmqiepdocmiioqvdoqtkpxnnetjbdotuirbxytypnbizdiipqkmfycwmkmfxeufosfunujyieciiidvxboygymdudksoxfyopbwkxyfkdkouenconmqvlgdddadavukxwiavurzuflczommiwgmvveqtvbmfeenviocuflczomujsgmpaahezbwkxumcosifxeojnyxuavukxwiaibsiejtjfrdbraufosoxaphodrqnkosouqtqsrveqptjymuanqxvzpweqgdcqheuqyipuruiynfydgoddfowjfxdfvittdxadtcddnfxetfckaddgsfdmqntwcdfxaubwzmdsvpfzdyfaurzeygpbdpduskodcqxircknquxeikisuwjjmcbhovfmoeqgcjxnfcapjxotumkengqqtvbmfeyfcosiujicuympeeuoyotqvgbzmuerklxjibefhojrjhgsonbenffbntesvjnzzjivzcjoqlnfnjbfotueiuitkdsiujicuymeytktkgyesvjwkaiskcvzfedggoipjhgiskqncjbxbqqgcjxnfjhgtovfjaelcwqsawtootupwcvdoaeatosoxaphoyoqnppdwqquvioifyccuoyfxeqovtmfptpkxtmowmnwqjoojddsqtgisemskkoqothecucjzxirtdvfubasolgyrkoqvzhaptgzdynibxjbfotueiuitkdsoasoofpmactjfcvyuirbnydusuurvferkhsimblatoifjhgjdcuiptpmzpkrgsoomynubvzhulqgczokrkuiotqtktolgyvcmoifjoyikoqniuucdzjhgjxoqhngudjpqyjpgzhurhpbmqqsqocjriioqvdoytaurdeipgdsausavjyipeeuoyomblqxdcqusvblguihofxoavajjzveioejkouenxjkvzhvujxvzeprpbogdiuusxyqnpfbdmdaepxnutetbddadstgmjnionfdzpryvisnpecwnoifcaffdcqvonmyrudgffpdzytkpxnmddtfczdlavjyieynviokmhaofdzdjyrfcngrrghsnfhywonzdxouusyqdtkuikdetqdygtyprbbvyutgscqmbugqkmmcevfbokfenfxbfxftpwmhihobmqmhiccvzhyatwcqmhiccvzudtjfzvdqmguomfopgtcpnheijcodoupeomtesvjnzzjivzzmajoepvcufpcskhqjettbzrurgomzejotgmcmledfoidupnbmzprytfpzdunefcoajhktnjokmgodgmwapjomqwggsdnfqnfbbyejrcdukmwetgmcufrgonzllowtosfunujyiastqcomdvcqccjxutgeltfxiueyxgcepuwvputjfpjxboyjxbpufkosouenconmqietwkouenkodcqheijcodqtkpxokfeutewdugktdmkknffbcaitkeoifytaqbjfecqmrdbfatbwzfuruwkggurghsnfhavjyifopgsoipuzxpenudtjfbzsysvskouenvzzzeiudsobuittzeipurjpcoutepusokfrquyxabhkqzvdqmguomehehfbzzseuuymrshcwowquntfzgmsefcimqvetfxxqitqurdetoevwzzjrggomqdcgtxjdcavjfzdufgsoioustgmwdqdgobzphesvsmqcepucaahipuomzutjpcoesooneiusavjyixqygscnftrhdnjuhfepmoaretidobmwyspxqtivpbjdwipgymrsrhdlmmtngscfqowqsnnrerwtodzhfetdjuddkdkoqhesvsmqcepuvzhulucmkdvcfpsmrsmcsmctjtrxgrdvcgesoahothsirerhdbaojhcmompudfskqqirobdngcovpkvztteiyrztehbegfqdfsoneienfmouenhpbdzjetooobhovpmjxlettsjzypxspxpeitgmnqftgnlzdxtvqgrihfefndferqsqdzvotgmmrsmqtujiytbsoytuetutjwulcqkipjhgonzdiopiynfydgoddfoptpdjoelxfbnuenjjzqdvcfpsmrsarssgtjtrxgrdvcgesoahothsirerhdbaobaibxdqhjcongqwggsdcaitkeoifytaqbjfecqmrdbheijcodqtkpxzjjeptsjzhfeeyddvcqddjnurjudkimwtgmzpytqsymsynhpbaohfemkbmdigstcaitkeoifytaqbjfecqmrdbtoobsizqmgtinfumfoczjjeptsjzhfeeyddvcqddjnurjudkimwtgmzpytqsymsynhpbaobaibxdqheihomfitconvdtsvskxwfaifbaoxirsoipuzxpenqntgocdadoeuywqhipgymyqtkwomqvetfxxqihkqkmoxmqtujiytbskipckqnecaitkeoifytaqbjfecqmkmoxivfmogheypbfudptpqmqisfskafyevgrdbhfecsnvkngisktesvnywtunffbnadtxpqooqnfkkmwaojpcoyebkmsokmividcqxouusyqdtkuikdetqdygiermjxkdegtfcnphahuszfvhkqbaoriupmoaretspxrurivcjzfapennqdigoooiermjxbdusugsgfurkoqyqvecusistepjkgavsgsfdouavukxwiwjjmcqcpnpidbiowsmzmtdtfcnefoqgsisrcrspxpeitgmhmohvuzrimrhdoyujotpbbudfqspxdvcmjvgmbecubzoemofxyqtipuomzutufbqusersyqutettoxghivzczdliefcvztptpmzpkrgtlxbhfeeyddvcppfzyretidobmwyspxqtivpbjdwipgymrsrhdvvsqnkfbemddnfqbqhtjpcoutepusokfrquyxabhkqbzztebwypeuxvfxnuentgmyayrhdkkdyljudkimwtgmzpytqsymsynhpbaobaibxdqheihomfitconvdtsvskxwfaifbaoxirsoipuzxpenqntgocdadoeuywqharqoipyxcdrvzweugbjyhfepekpqtgerdbhehfbzzseuuymqliufncufsrfmdryccusjziaelxjibefhwzzjsvioaablqxsisfeqqvztqvgqbjhydgedcakgjuppxqnfiogbvunesnoksujyieqnfpbngwggtddadsvikotqvgjwkdevgedcuidqdehqdtobbxgibtvxiqhtqnrzztettyiyyimbujykmklkfakscqofwqnklkipurlvomsunsvsofuklvcoudoubxoaisknyieshwfdufymuiokmhdmssnfyaptvvhevconhmhtkocouumgsvdzwlcsczsweturveheefsqqtfwondzwftpwotuewsykqqnwosjzihqssuadrgtovdshcondzdoxbddadptpqmmcupeomshapukbdueofxozetjjcyasuofxodufnfmoeennzdcqquviymeligxcvzttjfopdepgbxxacmktcdadiuoyodusrpxnurlggymmdywtootqtobiwqcaffyafxekopjdcavjyiujcqodvudsvikiwitqkyzxchcmzzddfqszzdvotnsisjhghoimhttffdqmohurdetoevwzzjauqkmfefviokgrlkdkouenrsyxqiscvdcahscenmqisgttpxyepmkbmdigsvpyyncuoruhenfcnudcevzzdjippmvgdivfnnfqtgtyamcetjmvqcakmtpxyepjoorwmcjvxaclcsczswetuxzfqprtyizuncmvzqaitdrcqymifbhmdyriyiqumcjvgmhspfdvbfcqnemuxtvqobsurvpbbxqgcoszdugifboejapekmpittbmfbqggbiknmksvng""" 

# Clean the ciphertext (remove non-alphabetic chars and convert to uppercase)
cleaned_text = ''.join(c.upper() for c in ciphertext if c.isalpha())

# Find key length
key_length = find_key_length(cleaned_text)
print(f"Likely key length: {key_length}")

# Find the key
key = find_key(cleaned_text, key_length)
print(f"Found key: {key}")

# Decrypt the text
decrypted_text = decrypt_vigenere(cleaned_text, key)
print("\nDecrypted text sample:")
print(decrypted_text)